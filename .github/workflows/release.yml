# This workflow is triggered on pushes to the main branch. It uses the
# googleapis/release-please-action to create a release based on the commit messages.
# The release is then published to the Azure ML Registry using the Azure CLI.
name: Release Component

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: write
  issues: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          release-type: simple

  publish-to-registry:
    needs: release-please
    runs-on: ubuntu-latest
    if: needs.release-please.outputs.release_created == 'true'
    steps:
      - name: Azure Login with Federated Credentials
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Download release source zip
        run: |
          TAG_NAME="${{ needs.release-please.outputs.tag_name }}"
          gh release download $TAG_NAME \
            --archive=zip \
            --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Unzip component artifact
        run: |
          ls -la
          TAG_NAME="${{ needs.release-please.outputs.tag_name }}"
          # Extract repository name from full repository name (owner/repo)
          REPO_NAME=${GITHUB_REPOSITORY#*/}
          echo "Repository name: $REPO_NAME"

          # Now we know what file to expect
          ARTIFACT_NAME=${REPO_NAME}-${TAG_NAME#v}
          ZIP_FILE="$ARTIFACT_NAME.zip"
          echo "Looking for zip file: $ZIP_FILE"
          unzip $ZIP_FILE
          ls -la $ARTIFACT_NAME
          # Store the artifact name as a GitHub Actions environment variable
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_ENV

      - name: Install Azure ML CLI
        run: |
          az extension add -n ml -y

      - uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '@@'
          tokenSuffix: '@@'
          files: '["${{ env.artifact_name }}/.github/workflows/*.md.tmpl"]'
        env:
          version: ${{ needs.release-please.outputs.tag_name }}
          version_link: https://github.com/${{ github.repository }}/releases/tag/${{ needs.release-please.outputs.tag_name }}

      - name: Publish component to Azure ML Registry
        run: |
          # Read GitHub Actions variable into bash variable
          cd ${{ env.artifact_name }}
          ls -la
          description=$(cat .github/workflows/description.md.tmpl)
          # Display description for debugging
          echo "Description content:"
          echo "$description"
          
          version="${{ needs.release-please.outputs.tag_name }}"
          yaml_filename="${{ vars.YAML_FILENAME }}"
          echo "Using component file: $yaml_filename"
          # Use the variable for the Azure ML commands
          
          # Extract component name from YAML file
          component_name=$(yq -r '.name' $yaml_filename)
          echo "Component name: $component_name"

          # Add version to the YAML file
          yq -i ".version = \"${version}\"" $yaml_filename
          
          version_link="https://github.com/${{ github.repository }}/releases/tag/${{ needs.release-please.outputs.tag_name }}"

          yq -i ".tags.changelog = \"${version_link}\"" $yaml_filename
          
          # Display the modified YAML for verification
          echo "Modified YAML file:"
          cat $yaml_filename

          az ml component create --name "$component_name" --file "$yaml_filename" --version "$version" \
          --registry-name ${{ vars.AZURE_ML_REGISTRY_NAME }} \
          --set description="$description"